"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_services_imageUploadService_ts";
exports.ids = ["_ssr_src_services_imageUploadService_ts"];
exports.modules = {

/***/ "(ssr)/./src/services/imageUploadService.ts":
/*!********************************************!*\
  !*** ./src/services/imageUploadService.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteImage: () => (/* binding */ deleteImage),\n/* harmony export */   getImageMetadata: () => (/* binding */ getImageMetadata),\n/* harmony export */   optimizeImage: () => (/* binding */ optimizeImage),\n/* harmony export */   uploadRestaurantImage: () => (/* binding */ uploadRestaurantImage),\n/* harmony export */   validateImage: () => (/* binding */ validateImage)\n/* harmony export */ });\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/firebase */ \"(ssr)/./src/lib/firebase.ts\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/storage */ \"(ssr)/./node_modules/firebase/storage/dist/index.mjs\");\n\n\n// Firebase Storage bağlantısını test et\nasync function testFirebaseStorageConnection() {\n    try {\n        console.log(\"\\uD83D\\uDD25 Firebase Storage bağlantısı test ediliyor...\");\n        // Test dosyası oluştur\n        const testData = new Blob([\n            \"Firebase Storage Test\"\n        ], {\n            type: \"text/plain\"\n        });\n        const testRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.ref)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.storage, \"test/connection-test.txt\");\n        // Test yüklemesi\n        await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.uploadBytes)(testRef, testData);\n        console.log(\"✅ Firebase Storage yazma testi başarılı\");\n        // Test okuma\n        const downloadURL = await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.getDownloadURL)(testRef);\n        console.log(\"✅ Firebase Storage okuma testi başarılı:\", downloadURL);\n        return true;\n    } catch (error) {\n        console.error(\"❌ Firebase Storage bağlantı testi başarısız:\", error);\n        return false;\n    }\n}\n// Ana kapak görseli yükleme fonksiyonu\nasync function uploadRestaurantImage(file, restaurantId, options = {}) {\n    try {\n        console.log(\"\\uD83D\\uDE80 Kapak g\\xf6rseli y\\xfckleme başlatılıyor...\", {\n            fileName: file.name,\n            fileSize: `${(file.size / 1024 / 1024).toFixed(2)} MB`,\n            fileType: file.type,\n            restaurantId,\n            storageConfig: {\n                bucket: _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.storage.app.options.storageBucket,\n                projectId: _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.storage.app.options.projectId\n            }\n        });\n        // Firebase Storage bağlantısını test et\n        const isStorageConnected = await testFirebaseStorageConnection();\n        if (!isStorageConnected) {\n            throw new Error(\"Firebase Storage bağlantısı kurulamadı. L\\xfctfen Firebase Console'dan Storage'ı etkinleştirin.\");\n        }\n        // Dosya validasyonu\n        const validationResult = validateImage(file);\n        if (!validationResult.isValid) {\n            throw new Error(validationResult.error || \"Ge\\xe7ersiz dosya\");\n        }\n        // Progress callback başlangıç\n        if (options.onProgress) {\n            options.onProgress(10);\n        }\n        // Dosya yolu oluştur\n        const timestamp = Date.now();\n        const fileName = `${timestamp}_${file.name.replace(/[^a-zA-Z0-9.-]/g, \"_\")}`;\n        const folderPath = restaurantId ? `restaurants/${restaurantId}` : \"restaurants\";\n        const filePath = `${folderPath}/${fileName}`;\n        console.log(\"\\uD83D\\uDCC1 Dosya yolu:\", filePath);\n        // Firebase Storage referansı oluştur\n        const storageRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.ref)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.storage, filePath);\n        console.log(\"\\uD83D\\uDCCD Storage referansı oluşturuldu:\", storageRef.fullPath);\n        // Progress simulation\n        if (options.onProgress) {\n            options.onProgress(25);\n        }\n        // Dosyayı yükle\n        console.log(\"⬆️ Firebase Storage'a y\\xfckleniyor...\");\n        // Progress simulation during upload\n        const progressInterval = setInterval(()=>{\n            if (options.onProgress) {\n                // Simulate progress between 25-75%\n                const currentProgress = Math.min(75, 25 + Math.random() * 50);\n                options.onProgress(currentProgress);\n            }\n        }, 200);\n        try {\n            const uploadResult = await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.uploadBytes)(storageRef, file);\n            clearInterval(progressInterval);\n            console.log(\"✅ Dosya y\\xfckleme başarılı:\", uploadResult.metadata);\n            if (options.onProgress) {\n                options.onProgress(90);\n            }\n            // Download URL al\n            console.log(\"\\uD83D\\uDD17 Download URL alınıyor...\");\n            const downloadURL = await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.getDownloadURL)(uploadResult.ref);\n            if (options.onProgress) {\n                options.onProgress(100);\n            }\n            console.log(\"✅ Kapak g\\xf6rseli başarıyla y\\xfcklendi:\", downloadURL);\n            return downloadURL;\n        } catch (uploadError) {\n            clearInterval(progressInterval);\n            console.error(\"❌ Upload hatası detayları:\", {\n                error: uploadError,\n                errorMessage: uploadError instanceof Error ? uploadError.message : \"Bilinmeyen hata\",\n                errorCode: uploadError?.code,\n                storageRef: storageRef.fullPath,\n                fileSize: file.size,\n                fileType: file.type\n            });\n            throw uploadError;\n        }\n    } catch (error) {\n        console.error(\"❌ Kapak g\\xf6rseli y\\xfckleme hatası:\", error);\n        throw handleUploadError(error);\n    }\n}\n// Hata yönetimi fonksiyonu\nfunction handleUploadError(error) {\n    console.error(\"\\uD83D\\uDD0D Hata analizi:\", {\n        errorType: typeof error,\n        errorName: error?.name,\n        errorMessage: error?.message,\n        errorCode: error?.code,\n        errorStack: error?.stack\n    });\n    if (error instanceof Error) {\n        // Firebase Storage hata kodları\n        if (error.message.includes(\"storage/unauthorized\") || error.message.includes(\"permission-denied\")) {\n            return new Error(\"Yetkilendirme hatası. Firebase Storage kurallarını kontrol edin.\");\n        } else if (error.message.includes(\"storage/quota-exceeded\")) {\n            return new Error(\"Depolama kotası aşıldı.\");\n        } else if (error.message.includes(\"storage/invalid-format\")) {\n            return new Error(\"Ge\\xe7ersiz dosya formatı.\");\n        } else if (error.message.includes(\"storage/object-not-found\")) {\n            return new Error(\"Dosya bulunamadı.\");\n        } else if (error.message.includes(\"storage/canceled\")) {\n            return new Error(\"Y\\xfckleme iptal edildi.\");\n        } else if (error.message.includes(\"storage/unknown\")) {\n            return new Error(\"Firebase Storage hen\\xfcz kurulmamış. L\\xfctfen Firebase Console'dan Storage'ı başlatın.\");\n        } else if (error.message.includes(\"network\") || error.message.includes(\"fetch\")) {\n            return new Error(\"İnternet bağlantısı problemi. L\\xfctfen tekrar deneyin.\");\n        } else if (error.message.includes(\"CORS\")) {\n            return new Error(\"CORS hatası. Firebase Storage konfig\\xfcrasyonunu kontrol edin.\");\n        } else {\n            return new Error(`Yükleme hatası: ${error.message}`);\n        }\n    }\n    return new Error(\"Bilinmeyen bir hata oluştu. L\\xfctfen tekrar deneyin.\");\n}\n// Görsel optimizasyonu (opsiyonel)\nasync function optimizeImage(file, options = {}) {\n    return new Promise((resolve)=>{\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n        const img = new Image();\n        img.onload = ()=>{\n            const { maxWidth = 1920, maxHeight = 1080, quality = 0.8 } = options;\n            let { width, height } = img;\n            // Boyut sınırlaması\n            if (width > maxWidth || height > maxHeight) {\n                const ratio = Math.min(maxWidth / width, maxHeight / height);\n                width *= ratio;\n                height *= ratio;\n            }\n            canvas.width = width;\n            canvas.height = height;\n            ctx?.drawImage(img, 0, 0, width, height);\n            canvas.toBlob((blob)=>{\n                if (blob) {\n                    const optimizedFile = new File([\n                        blob\n                    ], file.name, {\n                        type: options.format === \"webp\" ? \"image/webp\" : file.type,\n                        lastModified: Date.now()\n                    });\n                    resolve(optimizedFile);\n                } else {\n                    resolve(file);\n                }\n            }, options.format === \"webp\" ? \"image/webp\" : file.type, quality);\n        };\n        img.src = URL.createObjectURL(file);\n    });\n}\n// Dosya validasyonu\nfunction validateImage(file) {\n    // Dosya boyutu kontrolü (10MB)\n    const maxSize = 10 * 1024 * 1024;\n    if (file.size > maxSize) {\n        return {\n            isValid: false,\n            error: \"Dosya boyutu 10MB'dan b\\xfcy\\xfck olamaz.\"\n        };\n    }\n    // Dosya tipi kontrolü\n    const allowedTypes = [\n        \"image/jpeg\",\n        \"image/jpg\",\n        \"image/png\",\n        \"image/webp\"\n    ];\n    if (!allowedTypes.includes(file.type)) {\n        return {\n            isValid: false,\n            error: \"Sadece JPEG, PNG ve WebP formatları desteklenir.\"\n        };\n    }\n    return {\n        isValid: true\n    };\n}\n// Görsel metadata'sını al\nfunction getImageMetadata(file) {\n    return new Promise((resolve, reject)=>{\n        const img = new Image();\n        img.onload = ()=>{\n            resolve({\n                width: img.naturalWidth,\n                height: img.naturalHeight,\n                format: file.type,\n                size: file.size,\n                aspectRatio: img.naturalWidth / img.naturalHeight\n            });\n        };\n        img.onerror = ()=>reject(new Error(\"G\\xf6rsel metadata alınamadı\"));\n        img.src = URL.createObjectURL(file);\n    });\n}\n// Görsel silme fonksiyonu\nasync function deleteImage(imageUrl) {\n    try {\n        const imageRef = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.ref)(_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.storage, imageUrl);\n        await (0,firebase_storage__WEBPACK_IMPORTED_MODULE_1__.deleteObject)(imageRef);\n        console.log(\"✅ G\\xf6rsel başarıyla silindi\");\n    } catch (error) {\n        console.error(\"❌ G\\xf6rsel silme hatası:\", error);\n        throw new Error(\"G\\xf6rsel silinemedi\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvc2VydmljZXMvaW1hZ2VVcGxvYWRTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBeUM7QUFDeUM7QUErQmxGLHdDQUF3QztBQUN4QyxlQUFlSztJQUNiLElBQUk7UUFDRkMsUUFBUUMsR0FBRyxDQUFDO1FBRVosdUJBQXVCO1FBQ3ZCLE1BQU1DLFdBQVcsSUFBSUMsS0FBSztZQUFDO1NBQXdCLEVBQUU7WUFBRUMsTUFBTTtRQUFhO1FBQzFFLE1BQU1DLFVBQVVWLHFEQUFHQSxDQUFDRCxrREFBT0EsRUFBRTtRQUU3QixpQkFBaUI7UUFDakIsTUFBTUUsNkRBQVdBLENBQUNTLFNBQVNIO1FBQzNCRixRQUFRQyxHQUFHLENBQUM7UUFFWixhQUFhO1FBQ2IsTUFBTUssY0FBYyxNQUFNVCxnRUFBY0EsQ0FBQ1E7UUFDekNMLFFBQVFDLEdBQUcsQ0FBQyw0Q0FBNENLO1FBRXhELE9BQU87SUFDVCxFQUFFLE9BQU9DLE9BQU87UUFDZFAsUUFBUU8sS0FBSyxDQUFDLGdEQUFnREE7UUFDOUQsT0FBTztJQUNUO0FBQ0Y7QUFFQSx1Q0FBdUM7QUFDaEMsZUFBZUMsc0JBQ3BCQyxJQUFVLEVBQ1ZDLFlBQXFCLEVBQ3JCQyxVQUE4QixDQUFDLENBQUM7SUFFaEMsSUFBSTtRQUNGWCxRQUFRQyxHQUFHLENBQUMsNERBQTRDO1lBQ3REVyxVQUFVSCxLQUFLSSxJQUFJO1lBQ25CQyxVQUFVLENBQUMsRUFBRSxDQUFDTCxLQUFLTSxJQUFJLEdBQUcsT0FBTyxJQUFHLEVBQUdDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUN0REMsVUFBVVIsS0FBS0wsSUFBSTtZQUNuQk07WUFDQVEsZUFBZTtnQkFDYkMsUUFBUXpCLGtEQUFPQSxDQUFDMEIsR0FBRyxDQUFDVCxPQUFPLENBQUNVLGFBQWE7Z0JBQ3pDQyxXQUFXNUIsa0RBQU9BLENBQUMwQixHQUFHLENBQUNULE9BQU8sQ0FBQ1csU0FBUztZQUMxQztRQUNGO1FBRUEsd0NBQXdDO1FBQ3hD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TUFBTTtJQUNsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV5aXNlay8uL3NyYy9zZXJ2aWNlcy9pbWFnZVVwbG9hZFNlcnZpY2UudHM/YTcyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdG9yYWdlIH0gZnJvbSAnQC9saWIvZmlyZWJhc2UnO1xuaW1wb3J0IHsgcmVmLCB1cGxvYWRCeXRlcywgZ2V0RG93bmxvYWRVUkwsIGRlbGV0ZU9iamVjdCB9IGZyb20gJ2ZpcmViYXNlL3N0b3JhZ2UnO1xuXG4vLyBJbWFnZSBVcGxvYWQgT3B0aW9ucyBJbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VVcGxvYWRPcHRpb25zIHtcbiAgbWF4U2l6ZT86IG51bWJlcjsgLy8gTUIgY2luc2luZGVuXG4gIHF1YWxpdHk/OiBudW1iZXI7IC8vIDAuMSAtIDEuMCBhcmFzxLFcbiAgbWF4V2lkdGg/OiBudW1iZXI7XG4gIG1heEhlaWdodD86IG51bWJlcjtcbiAgZm9ybWF0PzogJ3dlYnAnIHwgJ2pwZWcnIHwgJ3BuZycgfCAnYXV0byc7XG4gIGZvbGRlcj86IHN0cmluZztcbiAgZ2VuZXJhdGVUaHVtYm5haWw/OiBib29sZWFuO1xuICBhaU9wdGltaXphdGlvbj86IGJvb2xlYW47XG4gIG9uUHJvZ3Jlc3M/OiAocHJvZ3Jlc3M6IG51bWJlcikgPT4gdm9pZDtcbn1cblxuLy8gVXBsb2FkIFByb2dyZXNzIEludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBVcGxvYWRQcm9ncmVzcyB7XG4gIHByb2dyZXNzOiBudW1iZXI7IC8vIDAtMTAwXG4gIHN0YXR1czogJ3VwbG9hZGluZycgfCAncHJvY2Vzc2luZycgfCAnY29tcGxldGUnIHwgJ2Vycm9yJztcbiAgbWVzc2FnZT86IHN0cmluZztcbn1cblxuLy8gSW1hZ2UgTWV0YWRhdGEgSW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlTWV0YWRhdGEge1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgc2l6ZTogbnVtYmVyO1xuICBmb3JtYXQ6IHN0cmluZztcbiAgYXNwZWN0UmF0aW86IG51bWJlcjtcbn1cblxuLy8gRmlyZWJhc2UgU3RvcmFnZSBiYcSfbGFudMSxc8SxbsSxIHRlc3QgZXRcbmFzeW5jIGZ1bmN0aW9uIHRlc3RGaXJlYmFzZVN0b3JhZ2VDb25uZWN0aW9uKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCfwn5SlIEZpcmViYXNlIFN0b3JhZ2UgYmHEn2xhbnTEsXPEsSB0ZXN0IGVkaWxpeW9yLi4uJyk7XG4gICAgXG4gICAgLy8gVGVzdCBkb3N5YXPEsSBvbHXFn3R1clxuICAgIGNvbnN0IHRlc3REYXRhID0gbmV3IEJsb2IoWydGaXJlYmFzZSBTdG9yYWdlIFRlc3QnXSwgeyB0eXBlOiAndGV4dC9wbGFpbicgfSk7XG4gICAgY29uc3QgdGVzdFJlZiA9IHJlZihzdG9yYWdlLCAndGVzdC9jb25uZWN0aW9uLXRlc3QudHh0Jyk7XG4gICAgXG4gICAgLy8gVGVzdCB5w7xrbGVtZXNpXG4gICAgYXdhaXQgdXBsb2FkQnl0ZXModGVzdFJlZiwgdGVzdERhdGEpO1xuICAgIGNvbnNvbGUubG9nKCfinIUgRmlyZWJhc2UgU3RvcmFnZSB5YXptYSB0ZXN0aSBiYcWfYXLEsWzEsScpO1xuICAgIFxuICAgIC8vIFRlc3Qgb2t1bWFcbiAgICBjb25zdCBkb3dubG9hZFVSTCA9IGF3YWl0IGdldERvd25sb2FkVVJMKHRlc3RSZWYpO1xuICAgIGNvbnNvbGUubG9nKCfinIUgRmlyZWJhc2UgU3RvcmFnZSBva3VtYSB0ZXN0aSBiYcWfYXLEsWzEsTonLCBkb3dubG9hZFVSTCk7XG4gICAgXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign4p2MIEZpcmViYXNlIFN0b3JhZ2UgYmHEn2xhbnTEsSB0ZXN0aSBiYcWfYXLEsXPEsXo6JywgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBBbmEga2FwYWsgZ8O2cnNlbGkgecO8a2xlbWUgZm9ua3NpeW9udVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwbG9hZFJlc3RhdXJhbnRJbWFnZShcbiAgZmlsZTogRmlsZSxcbiAgcmVzdGF1cmFudElkPzogc3RyaW5nLFxuICBvcHRpb25zOiBJbWFnZVVwbG9hZE9wdGlvbnMgPSB7fVxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygn8J+agCBLYXBhayBnw7Zyc2VsaSB5w7xrbGVtZSBiYcWfbGF0xLFsxLF5b3IuLi4nLCB7XG4gICAgICBmaWxlTmFtZTogZmlsZS5uYW1lLFxuICAgICAgZmlsZVNpemU6IGAkeyhmaWxlLnNpemUgLyAxMDI0IC8gMTAyNCkudG9GaXhlZCgyKX0gTUJgLFxuICAgICAgZmlsZVR5cGU6IGZpbGUudHlwZSxcbiAgICAgIHJlc3RhdXJhbnRJZCxcbiAgICAgIHN0b3JhZ2VDb25maWc6IHtcbiAgICAgICAgYnVja2V0OiBzdG9yYWdlLmFwcC5vcHRpb25zLnN0b3JhZ2VCdWNrZXQsXG4gICAgICAgIHByb2plY3RJZDogc3RvcmFnZS5hcHAub3B0aW9ucy5wcm9qZWN0SWRcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEZpcmViYXNlIFN0b3JhZ2UgYmHEn2xhbnTEsXPEsW7EsSB0ZXN0IGV0XG4gICAgY29uc3QgaXNTdG9yYWdlQ29ubmVjdGVkID0gYXdhaXQgdGVzdEZpcmViYXNlU3RvcmFnZUNvbm5lY3Rpb24oKTtcbiAgICBpZiAoIWlzU3RvcmFnZUNvbm5lY3RlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaXJlYmFzZSBTdG9yYWdlIGJhxJ9sYW50xLFzxLEga3VydWxhbWFkxLEuIEzDvHRmZW4gRmlyZWJhc2UgQ29uc29sZVxcJ2RhbiBTdG9yYWdlXFwnxLEgZXRraW5sZcWfdGlyaW4uJyk7XG4gICAgfVxuXG4gICAgLy8gRG9zeWEgdmFsaWRhc3lvbnVcbiAgICBjb25zdCB2YWxpZGF0aW9uUmVzdWx0ID0gdmFsaWRhdGVJbWFnZShmaWxlKTtcbiAgICBpZiAoIXZhbGlkYXRpb25SZXN1bHQuaXNWYWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHZhbGlkYXRpb25SZXN1bHQuZXJyb3IgfHwgJ0dlw6dlcnNpeiBkb3N5YScpO1xuICAgIH1cblxuICAgIC8vIFByb2dyZXNzIGNhbGxiYWNrIGJhxZ9sYW5nxLHDp1xuICAgIGlmIChvcHRpb25zLm9uUHJvZ3Jlc3MpIHtcbiAgICAgIG9wdGlvbnMub25Qcm9ncmVzcygxMCk7XG4gICAgfVxuXG4gICAgLy8gRG9zeWEgeW9sdSBvbHXFn3R1clxuICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgY29uc3QgZmlsZU5hbWUgPSBgJHt0aW1lc3RhbXB9XyR7ZmlsZS5uYW1lLnJlcGxhY2UoL1teYS16QS1aMC05Li1dL2csICdfJyl9YDtcbiAgICBjb25zdCBmb2xkZXJQYXRoID0gcmVzdGF1cmFudElkID8gYHJlc3RhdXJhbnRzLyR7cmVzdGF1cmFudElkfWAgOiAncmVzdGF1cmFudHMnO1xuICAgIGNvbnN0IGZpbGVQYXRoID0gYCR7Zm9sZGVyUGF0aH0vJHtmaWxlTmFtZX1gO1xuXG4gICAgY29uc29sZS5sb2coJ/Cfk4EgRG9zeWEgeW9sdTonLCBmaWxlUGF0aCk7XG5cbiAgICAvLyBGaXJlYmFzZSBTdG9yYWdlIHJlZmVyYW5zxLEgb2x1xZ90dXJcbiAgICBjb25zdCBzdG9yYWdlUmVmID0gcmVmKHN0b3JhZ2UsIGZpbGVQYXRoKTtcbiAgICBjb25zb2xlLmxvZygn8J+TjSBTdG9yYWdlIHJlZmVyYW5zxLEgb2x1xZ90dXJ1bGR1OicsIHN0b3JhZ2VSZWYuZnVsbFBhdGgpO1xuXG4gICAgLy8gUHJvZ3Jlc3Mgc2ltdWxhdGlvblxuICAgIGlmIChvcHRpb25zLm9uUHJvZ3Jlc3MpIHtcbiAgICAgIG9wdGlvbnMub25Qcm9ncmVzcygyNSk7XG4gICAgfVxuXG4gICAgLy8gRG9zeWF5xLEgecO8a2xlXG4gICAgY29uc29sZS5sb2coJ+Kshu+4jyBGaXJlYmFzZSBTdG9yYWdlXFwnYSB5w7xrbGVuaXlvci4uLicpO1xuICAgIFxuICAgIC8vIFByb2dyZXNzIHNpbXVsYXRpb24gZHVyaW5nIHVwbG9hZFxuICAgIGNvbnN0IHByb2dyZXNzSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAob3B0aW9ucy5vblByb2dyZXNzKSB7XG4gICAgICAgIC8vIFNpbXVsYXRlIHByb2dyZXNzIGJldHdlZW4gMjUtNzUlXG4gICAgICAgIGNvbnN0IGN1cnJlbnRQcm9ncmVzcyA9IE1hdGgubWluKDc1LCAyNSArIE1hdGgucmFuZG9tKCkgKiA1MCk7XG4gICAgICAgIG9wdGlvbnMub25Qcm9ncmVzcyhjdXJyZW50UHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgIH0sIDIwMCk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdXBsb2FkUmVzdWx0ID0gYXdhaXQgdXBsb2FkQnl0ZXMoc3RvcmFnZVJlZiwgZmlsZSk7XG4gICAgICBjbGVhckludGVydmFsKHByb2dyZXNzSW50ZXJ2YWwpO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygn4pyFIERvc3lhIHnDvGtsZW1lIGJhxZ9hcsSxbMSxOicsIHVwbG9hZFJlc3VsdC5tZXRhZGF0YSk7XG4gICAgICBcbiAgICAgIGlmIChvcHRpb25zLm9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgb3B0aW9ucy5vblByb2dyZXNzKDkwKTtcbiAgICAgIH1cblxuICAgICAgLy8gRG93bmxvYWQgVVJMIGFsXG4gICAgICBjb25zb2xlLmxvZygn8J+UlyBEb3dubG9hZCBVUkwgYWzEsW7EsXlvci4uLicpO1xuICAgICAgY29uc3QgZG93bmxvYWRVUkwgPSBhd2FpdCBnZXREb3dubG9hZFVSTCh1cGxvYWRSZXN1bHQucmVmKTtcblxuICAgICAgaWYgKG9wdGlvbnMub25Qcm9ncmVzcykge1xuICAgICAgICBvcHRpb25zLm9uUHJvZ3Jlc3MoMTAwKTtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5sb2coJ+KchSBLYXBhayBnw7Zyc2VsaSBiYcWfYXLEsXlsYSB5w7xrbGVuZGk6JywgZG93bmxvYWRVUkwpO1xuICAgICAgcmV0dXJuIGRvd25sb2FkVVJMO1xuXG4gICAgfSBjYXRjaCAodXBsb2FkRXJyb3IpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwocHJvZ3Jlc3NJbnRlcnZhbCk7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgVXBsb2FkIGhhdGFzxLEgZGV0YXlsYXLEsTonLCB7XG4gICAgICAgIGVycm9yOiB1cGxvYWRFcnJvcixcbiAgICAgICAgZXJyb3JNZXNzYWdlOiB1cGxvYWRFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gdXBsb2FkRXJyb3IubWVzc2FnZSA6ICdCaWxpbm1leWVuIGhhdGEnLFxuICAgICAgICBlcnJvckNvZGU6ICh1cGxvYWRFcnJvciBhcyBhbnkpPy5jb2RlLFxuICAgICAgICBzdG9yYWdlUmVmOiBzdG9yYWdlUmVmLmZ1bGxQYXRoLFxuICAgICAgICBmaWxlU2l6ZTogZmlsZS5zaXplLFxuICAgICAgICBmaWxlVHlwZTogZmlsZS50eXBlXG4gICAgICB9KTtcbiAgICAgIHRocm93IHVwbG9hZEVycm9yO1xuICAgIH1cblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBLYXBhayBnw7Zyc2VsaSB5w7xrbGVtZSBoYXRhc8SxOicsIGVycm9yKTtcbiAgICB0aHJvdyBoYW5kbGVVcGxvYWRFcnJvcihlcnJvcik7XG4gIH1cbn1cblxuLy8gSGF0YSB5w7ZuZXRpbWkgZm9ua3NpeW9udVxuZnVuY3Rpb24gaGFuZGxlVXBsb2FkRXJyb3IoZXJyb3I6IGFueSk6IEVycm9yIHtcbiAgY29uc29sZS5lcnJvcign8J+UjSBIYXRhIGFuYWxpemk6Jywge1xuICAgIGVycm9yVHlwZTogdHlwZW9mIGVycm9yLFxuICAgIGVycm9yTmFtZTogZXJyb3I/Lm5hbWUsXG4gICAgZXJyb3JNZXNzYWdlOiBlcnJvcj8ubWVzc2FnZSxcbiAgICBlcnJvckNvZGU6IGVycm9yPy5jb2RlLFxuICAgIGVycm9yU3RhY2s6IGVycm9yPy5zdGFja1xuICB9KTtcblxuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIC8vIEZpcmViYXNlIFN0b3JhZ2UgaGF0YSBrb2RsYXLEsVxuICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdzdG9yYWdlL3VuYXV0aG9yaXplZCcpIHx8IGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3Blcm1pc3Npb24tZGVuaWVkJykpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1lldGtpbGVuZGlybWUgaGF0YXPEsS4gRmlyZWJhc2UgU3RvcmFnZSBrdXJhbGxhcsSxbsSxIGtvbnRyb2wgZWRpbi4nKTtcbiAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3N0b3JhZ2UvcXVvdGEtZXhjZWVkZWQnKSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignRGVwb2xhbWEga290YXPEsSBhxZ/EsWxkxLEuJyk7XG4gICAgfSBlbHNlIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdzdG9yYWdlL2ludmFsaWQtZm9ybWF0JykpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0dlw6dlcnNpeiBkb3N5YSBmb3JtYXTEsS4nKTtcbiAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3N0b3JhZ2Uvb2JqZWN0LW5vdC1mb3VuZCcpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdEb3N5YSBidWx1bmFtYWTEsS4nKTtcbiAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3N0b3JhZ2UvY2FuY2VsZWQnKSkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignWcO8a2xlbWUgaXB0YWwgZWRpbGRpLicpO1xuICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnc3RvcmFnZS91bmtub3duJykpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ZpcmViYXNlIFN0b3JhZ2UgaGVuw7x6IGt1cnVsbWFtxLHFny4gTMO8dGZlbiBGaXJlYmFzZSBDb25zb2xlXFwnZGFuIFN0b3JhZ2VcXCfEsSBiYcWfbGF0xLFuLicpO1xuICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnbmV0d29yaycpIHx8IGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ2ZldGNoJykpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ8SwbnRlcm5ldCBiYcSfbGFudMSxc8SxIHByb2JsZW1pLiBMw7x0ZmVuIHRla3JhciBkZW5leWluLicpO1xuICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnQ09SUycpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdDT1JTIGhhdGFzxLEuIEZpcmViYXNlIFN0b3JhZ2Uga29uZmlnw7xyYXN5b251bnUga29udHJvbCBlZGluLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBZw7xrbGVtZSBoYXRhc8SxOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gbmV3IEVycm9yKCdCaWxpbm1leWVuIGJpciBoYXRhIG9sdcWfdHUuIEzDvHRmZW4gdGVrcmFyIGRlbmV5aW4uJyk7XG59XG5cbi8vIEfDtnJzZWwgb3B0aW1pemFzeW9udSAob3BzaXlvbmVsKVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9wdGltaXplSW1hZ2UoZmlsZTogRmlsZSwgb3B0aW9uczogSW1hZ2VVcGxvYWRPcHRpb25zID0ge30pOiBQcm9taXNlPEZpbGU+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG5cbiAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgY29uc3QgeyBtYXhXaWR0aCA9IDE5MjAsIG1heEhlaWdodCA9IDEwODAsIHF1YWxpdHkgPSAwLjggfSA9IG9wdGlvbnM7XG4gICAgICBcbiAgICAgIGxldCB7IHdpZHRoLCBoZWlnaHQgfSA9IGltZztcbiAgICAgIFxuICAgICAgLy8gQm95dXQgc8SxbsSxcmxhbWFzxLFcbiAgICAgIGlmICh3aWR0aCA+IG1heFdpZHRoIHx8IGhlaWdodCA+IG1heEhlaWdodCkge1xuICAgICAgICBjb25zdCByYXRpbyA9IE1hdGgubWluKG1heFdpZHRoIC8gd2lkdGgsIG1heEhlaWdodCAvIGhlaWdodCk7XG4gICAgICAgIHdpZHRoICo9IHJhdGlvO1xuICAgICAgICBoZWlnaHQgKj0gcmF0aW87XG4gICAgICB9XG5cbiAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIFxuICAgICAgY3R4Py5kcmF3SW1hZ2UoaW1nLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIFxuICAgICAgY2FudmFzLnRvQmxvYihcbiAgICAgICAgKGJsb2IpID0+IHtcbiAgICAgICAgICBpZiAoYmxvYikge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW1pemVkRmlsZSA9IG5ldyBGaWxlKFtibG9iXSwgZmlsZS5uYW1lLCB7XG4gICAgICAgICAgICAgIHR5cGU6IG9wdGlvbnMuZm9ybWF0ID09PSAnd2VicCcgPyAnaW1hZ2Uvd2VicCcgOiBmaWxlLnR5cGUsXG4gICAgICAgICAgICAgIGxhc3RNb2RpZmllZDogRGF0ZS5ub3coKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXNvbHZlKG9wdGltaXplZEZpbGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGZpbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3B0aW9ucy5mb3JtYXQgPT09ICd3ZWJwJyA/ICdpbWFnZS93ZWJwJyA6IGZpbGUudHlwZSxcbiAgICAgICAgcXVhbGl0eVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgaW1nLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XG4gIH0pO1xufVxuXG4vLyBEb3N5YSB2YWxpZGFzeW9udVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSW1hZ2UoZmlsZTogRmlsZSk6IHsgaXNWYWxpZDogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfSB7XG4gIC8vIERvc3lhIGJveXV0dSBrb250cm9sw7wgKDEwTUIpXG4gIGNvbnN0IG1heFNpemUgPSAxMCAqIDEwMjQgKiAxMDI0O1xuICBpZiAoZmlsZS5zaXplID4gbWF4U2l6ZSkge1xuICAgIHJldHVybiB7IGlzVmFsaWQ6IGZhbHNlLCBlcnJvcjogJ0Rvc3lhIGJveXV0dSAxME1CXFwnZGFuIGLDvHnDvGsgb2xhbWF6LicgfTtcbiAgfVxuXG4gIC8vIERvc3lhIHRpcGkga29udHJvbMO8XG4gIGNvbnN0IGFsbG93ZWRUeXBlcyA9IFsnaW1hZ2UvanBlZycsICdpbWFnZS9qcGcnLCAnaW1hZ2UvcG5nJywgJ2ltYWdlL3dlYnAnXTtcbiAgaWYgKCFhbGxvd2VkVHlwZXMuaW5jbHVkZXMoZmlsZS50eXBlKSkge1xuICAgIHJldHVybiB7IGlzVmFsaWQ6IGZhbHNlLCBlcnJvcjogJ1NhZGVjZSBKUEVHLCBQTkcgdmUgV2ViUCBmb3JtYXRsYXLEsSBkZXN0ZWtsZW5pci4nIH07XG4gIH1cblxuICByZXR1cm4geyBpc1ZhbGlkOiB0cnVlIH07XG59XG5cbi8vIEfDtnJzZWwgbWV0YWRhdGEnc8SxbsSxIGFsXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1hZ2VNZXRhZGF0YShmaWxlOiBGaWxlKTogUHJvbWlzZTxJbWFnZU1ldGFkYXRhPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgXG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIHJlc29sdmUoe1xuICAgICAgICB3aWR0aDogaW1nLm5hdHVyYWxXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBpbWcubmF0dXJhbEhlaWdodCxcbiAgICAgICAgZm9ybWF0OiBmaWxlLnR5cGUsXG4gICAgICAgIHNpemU6IGZpbGUuc2l6ZSxcbiAgICAgICAgYXNwZWN0UmF0aW86IGltZy5uYXR1cmFsV2lkdGggLyBpbWcubmF0dXJhbEhlaWdodFxuICAgICAgfSk7XG4gICAgfTtcbiAgICBcbiAgICBpbWcub25lcnJvciA9ICgpID0+IHJlamVjdChuZXcgRXJyb3IoJ0fDtnJzZWwgbWV0YWRhdGEgYWzEsW5hbWFkxLEnKSk7XG4gICAgaW1nLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XG4gIH0pO1xufVxuXG4vLyBHw7Zyc2VsIHNpbG1lIGZvbmtzaXlvbnVcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVJbWFnZShpbWFnZVVybDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgaW1hZ2VSZWYgPSByZWYoc3RvcmFnZSwgaW1hZ2VVcmwpO1xuICAgIGF3YWl0IGRlbGV0ZU9iamVjdChpbWFnZVJlZik7XG4gICAgY29uc29sZS5sb2coJ+KchSBHw7Zyc2VsIGJhxZ9hcsSxeWxhIHNpbGluZGknKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfinYwgR8O2cnNlbCBzaWxtZSBoYXRhc8SxOicsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0fDtnJzZWwgc2lsaW5lbWVkaScpO1xuICB9XG59ICJdLCJuYW1lcyI6WyJzdG9yYWdlIiwicmVmIiwidXBsb2FkQnl0ZXMiLCJnZXREb3dubG9hZFVSTCIsImRlbGV0ZU9iamVjdCIsInRlc3RGaXJlYmFzZVN0b3JhZ2VDb25uZWN0aW9uIiwiY29uc29sZSIsImxvZyIsInRlc3REYXRhIiwiQmxvYiIsInR5cGUiLCJ0ZXN0UmVmIiwiZG93bmxvYWRVUkwiLCJlcnJvciIsInVwbG9hZFJlc3RhdXJhbnRJbWFnZSIsImZpbGUiLCJyZXN0YXVyYW50SWQiLCJvcHRpb25zIiwiZmlsZU5hbWUiLCJuYW1lIiwiZmlsZVNpemUiLCJzaXplIiwidG9GaXhlZCIsImZpbGVUeXBlIiwic3RvcmFnZUNvbmZpZyIsImJ1Y2tldCIsImFwcCIsInN0b3JhZ2VCdWNrZXQiLCJwcm9qZWN0SWQiLCJpc1N0b3JhZ2VDb25uZWN0ZWQiLCJFcnJvciIsInZhbGlkYXRpb25SZXN1bHQiLCJ2YWxpZGF0ZUltYWdlIiwiaXNWYWxpZCIsIm9uUHJvZ3Jlc3MiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwicmVwbGFjZSIsImZvbGRlclBhdGgiLCJmaWxlUGF0aCIsInN0b3JhZ2VSZWYiLCJmdWxsUGF0aCIsInByb2dyZXNzSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImN1cnJlbnRQcm9ncmVzcyIsIk1hdGgiLCJtaW4iLCJyYW5kb20iLCJ1cGxvYWRSZXN1bHQiLCJjbGVhckludGVydmFsIiwibWV0YWRhdGEiLCJ1cGxvYWRFcnJvciIsImVycm9yTWVzc2FnZSIsIm1lc3NhZ2UiLCJlcnJvckNvZGUiLCJjb2RlIiwiaGFuZGxlVXBsb2FkRXJyb3IiLCJlcnJvclR5cGUiLCJlcnJvck5hbWUiLCJlcnJvclN0YWNrIiwic3RhY2siLCJpbmNsdWRlcyIsIm9wdGltaXplSW1hZ2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImN0eCIsImdldENvbnRleHQiLCJpbWciLCJJbWFnZSIsIm9ubG9hZCIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwicXVhbGl0eSIsIndpZHRoIiwiaGVpZ2h0IiwicmF0aW8iLCJkcmF3SW1hZ2UiLCJ0b0Jsb2IiLCJibG9iIiwib3B0aW1pemVkRmlsZSIsIkZpbGUiLCJmb3JtYXQiLCJsYXN0TW9kaWZpZWQiLCJzcmMiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJtYXhTaXplIiwiYWxsb3dlZFR5cGVzIiwiZ2V0SW1hZ2VNZXRhZGF0YSIsInJlamVjdCIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJhc3BlY3RSYXRpbyIsIm9uZXJyb3IiLCJkZWxldGVJbWFnZSIsImltYWdlVXJsIiwiaW1hZ2VSZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./src/services/imageUploadService.ts\n");

/***/ })

};
;